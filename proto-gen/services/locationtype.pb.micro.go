// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/locationtype.proto

package services

import (
	fmt "fmt"
	ptypes "github.com/gho1b/pantrack/protobuf/ptypes"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LocationTypeService service

func NewLocationTypeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LocationTypeService service

type LocationTypeService interface {
	GetLocationType(ctx context.Context, in *wrappers.BytesValue, opts ...client.CallOption) (*ptypes.LocationType, error)
}

type locationTypeService struct {
	c    client.Client
	name string
}

func NewLocationTypeService(name string, c client.Client) LocationTypeService {
	return &locationTypeService{
		c:    c,
		name: name,
	}
}

func (c *locationTypeService) GetLocationType(ctx context.Context, in *wrappers.BytesValue, opts ...client.CallOption) (*ptypes.LocationType, error) {
	req := c.c.NewRequest(c.name, "LocationTypeService.GetLocationType", in)
	out := new(ptypes.LocationType)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocationTypeService service

type LocationTypeServiceHandler interface {
	GetLocationType(context.Context, *wrappers.BytesValue, *ptypes.LocationType) error
}

func RegisterLocationTypeServiceHandler(s server.Server, hdlr LocationTypeServiceHandler, opts ...server.HandlerOption) error {
	type locationTypeService interface {
		GetLocationType(ctx context.Context, in *wrappers.BytesValue, out *ptypes.LocationType) error
	}
	type LocationTypeService struct {
		locationTypeService
	}
	h := &locationTypeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LocationTypeService{h}, opts...))
}

type locationTypeServiceHandler struct {
	LocationTypeServiceHandler
}

func (h *locationTypeServiceHandler) GetLocationType(ctx context.Context, in *wrappers.BytesValue, out *ptypes.LocationType) error {
	return h.LocationTypeServiceHandler.GetLocationType(ctx, in, out)
}
