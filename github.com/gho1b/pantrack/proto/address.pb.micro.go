// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: location.protobuf

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the protobuf package it is being compiled against.
// A compilation error at this line likely means your copy of the
// protobuf package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the protobuf package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for AddressService service

func NewAddressServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AddressService service

type AddressService interface {
	GetAddress(ctx context.Context, in *AddressRequest, opts ...client.CallOption) (*AddressResponse, error)
}

type addressService struct {
	name string
}

func NewAddressService(name string) AddressService {
	return &addressService{name: name}
}

func (c *addressService) GetAddress(ctx context.Context, in *AddressRequest, opts ...client.CallOption) (*AddressResponse, error) {
	req := microClient.NewRequest(c.name, "AddressService.GetAddress", in)
	out := new(AddressResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AddressService service

type AddressServiceHandler interface {
	GetAddress(context.Context, *AddressRequest, *AddressResponse) error
}

func RegisterAddressServiceHandler(hdlr AddressServiceHandler, opts ...server.HandlerOption) error {
	type addressService interface {
		GetAddress(ctx context.Context, in *AddressRequest, out *AddressResponse) error
	}
	type AddressService struct {
		addressService
	}
	h := &addressServiceHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&AddressService{h}, opts...))
}

type addressServiceHandler struct {
	AddressServiceHandler
}

func (h *addressServiceHandler) GetAddress(ctx context.Context, in *AddressRequest, out *AddressResponse) error {
	return h.AddressServiceHandler.GetAddress(ctx, in, out)
}
